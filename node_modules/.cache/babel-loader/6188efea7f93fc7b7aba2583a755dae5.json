{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ExsaNik\\\\NodeJs\\\\react\\\\redux-store\\\\src\\\\components\\\\book-list\\\\book-list.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from '../../utils';\nimport { withBookstoreService } from '../hoc';\nimport { booksLoaded, booksRequested, booksError } from '../../actions';\nimport BookListItem from '../book-list-item';\nimport Spinner from '../spinner';\nimport ErrorIndicator from '../error-indicator';\n\nclass BookList extends React.Component {\n  componentDidMount() {\n    this.props.fetchBooks();\n  }\n\n  render() {\n    const _this$props = this.props,\n          books = _this$props.books,\n          loading = _this$props.loading,\n          error = _this$props.error;\n    if (error) return React.createElement(ErrorIndicator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    });\n    return React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }) : books.map(book => {\n      return React.createElement(\"li\", {\n        className: \"list-group-item\",\n        key: book.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(BookListItem, {\n        book: book,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }));\n    }));\n  }\n\n}\n\nconst mapStateToProps = ({\n  books,\n  loading,\n  error\n}) => {\n  return {\n    books,\n    loading,\n    error\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const bookstoreService = ownProps.bookstoreService;\n  dispatch(booksRequested());\n  bookstoreService.getBooks().then(data => dispatch(booksLoaded(data))).catch(err => dispatch(booksError(err)));\n  return {\n    fetchBooks\n  };\n};\n\nexport default compose(withBookstoreService(), connect(mapStateToProps, mapDispatchToProps))(BookList);","map":{"version":3,"sources":["C:\\Users\\ExsaNik\\NodeJs\\react\\redux-store\\src\\components\\book-list\\book-list.js"],"names":["React","connect","compose","withBookstoreService","booksLoaded","booksRequested","booksError","BookListItem","Spinner","ErrorIndicator","BookList","Component","componentDidMount","props","fetchBooks","render","books","loading","error","map","book","id","mapStateToProps","mapDispatchToProps","dispatch","ownProps","bookstoreService","getBooks","then","data","catch","err"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAuB,aAAvB;AAEA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,oBAAR,QAAmC,QAAnC;AACA,SAAQC,WAAR,EAAqBC,cAArB,EAAqCC,UAArC,QAAsD,eAAtD;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;;AAEA,MAAMC,QAAN,SAAuBV,KAAK,CAACW,SAA7B,CACA;AACIC,EAAAA,iBAAiB,GACjB;AACI,SAAKC,KAAL,CAAWC,UAAX;AACH;;AACDC,EAAAA,MAAM,GACN;AAAA,wBACoC,KAAKF,KADzC;AAAA,UACWG,KADX,eACWA,KADX;AAAA,UACkBC,OADlB,eACkBA,OADlB;AAAA,UAC2BC,KAD3B,eAC2BA,KAD3B;AAEI,QAAGA,KAAH,EACI,OAAO,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACJ,WACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQD,OAAO,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAiBD,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAU;AACxC,aACI;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAgC,QAAA,GAAG,EAAIA,IAAI,CAACC,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgD,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAGD,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhD,CADJ;AAGH,KAJuB,CAFhC,CADJ;AAWH;;AArBL;;AAwBA,MAAME,eAAe,GAAG,CAAC;AAACN,EAAAA,KAAD;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA;AAAjB,CAAD,KAA6B;AACjD,SAAO;AAAEF,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,GAAP;AACH,CAFD;;AAIA,MAAMK,kBAAkB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAAA,QACxCC,gBADwC,GACpBD,QADoB,CACxCC,gBADwC;AAE/CF,EAAAA,QAAQ,CAACnB,cAAc,EAAf,CAAR;AACAqB,EAAAA,gBAAgB,CAACC,QAAjB,GACKC,IADL,CACWC,IAAD,IAAUL,QAAQ,CAACpB,WAAW,CAACyB,IAAD,CAAZ,CAD5B,EAEKC,KAFL,CAEYC,GAAD,IAASP,QAAQ,CAAClB,UAAU,CAACyB,GAAD,CAAX,CAF5B;AAIA,SAAO;AAACjB,IAAAA;AAAD,GAAP;AACH,CARD;;AAUA,eAAeZ,OAAO,CACdC,oBAAoB,EADN,EAEdF,OAAO,CAACqB,eAAD,EAAkBC,kBAAlB,CAFO,CAAP,CAGTb,QAHS,CAAf","sourcesContent":["import React from 'react';\r\nimport {connect } from 'react-redux'\r\n\r\nimport {compose} from '../../utils';\r\nimport {withBookstoreService} from '../hoc';\r\nimport {booksLoaded, booksRequested, booksError} from '../../actions';\r\nimport BookListItem from '../book-list-item';\r\nimport Spinner from '../spinner';\r\nimport ErrorIndicator from '../error-indicator';\r\n\r\nclass BookList extends React.Component \r\n{\r\n    componentDidMount()\r\n    {\r\n        this.props.fetchBooks();\r\n    }\r\n    render() \r\n    {\r\n        const {books, loading, error} = this.props;\r\n        if(error)\r\n            return <ErrorIndicator />;\r\n        return(\r\n            <ul className=\"list-group\">\r\n                {\r\n                    loading ? <Spinner /> : books.map((book) => {\r\n                        return (\r\n                            <li className=\"list-group-item\" key = {book.id}><BookListItem book ={book}/></li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({books, loading, error}) => {\r\n    return { books, loading, error}\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    const {bookstoreService} = ownProps;\r\n    dispatch(booksRequested());\r\n    bookstoreService.getBooks()\r\n        .then((data) => dispatch(booksLoaded(data)))\r\n        .catch((err) => dispatch(booksError(err)));\r\n    \r\n    return {fetchBooks};\r\n};\r\n\r\nexport default compose(\r\n        withBookstoreService(),\r\n        connect(mapStateToProps, mapDispatchToProps)\r\n    )(BookList);\r\n"]},"metadata":{},"sourceType":"module"}